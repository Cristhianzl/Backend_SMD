import { HttpException, HttpStatus, Injectable } from '@nestjs/common';
import { JwtService } from '@nestjs/jwt';
import { createTenantName } from 'src/shared/create-tenant-name';
import { v4 as uuid } from 'uuid';
import { Client } from 'pg';
import { InjectConnection } from 'nest-postgres';
@Injectable()
export class TenantsService {
  tenant: string;

  constructor(
    @InjectConnection('dbConnection')
    private dbConnection: Client,
    private jwtService: JwtService,
  ) {
    this.setTenant('public');
  }

  setTenant(tenant: string) {
    this.tenant = 'public' ?? tenant;
  }

  async listAll() {
    const data = await this.dbConnection.query(
      `select * from ${this.tenant}.tenants order by created_at desc`,
    );
    const countData = await this.dbConnection.query(
      `select count(*) from ${this.tenant}.tenants `,
    );

    const count = Number(countData?.rows[0]?.count ?? 0);

    return {
      data,
      count,
    };
  }

  async find(id: string) {
    return await this.dbConnection.query(
      `select * from ${this.tenant}.tenants where id = '${id}'`,
    );
  }

  async findByName(token: string) {
    const access = await this.jwtService.decode(token.split(' ')[1]);

    const data = await this.dbConnection.query(
      `select * from public.tenants where tenant_name = '${access.tenantName}'`,
    );

    return data?.rows[0];
  }

  async findWithFilter(filters: any, page: number, pagesize: number) {
    let filtersQuery: string = '';
    let queryCount: string = '';

    if (filters?.name) {
      filtersQuery = filtersQuery + ` and name like '%${filters.name}%' `;
    }

    const query = `select * from ${this.tenant}.tenants where 1=1 ${filtersQuery} 
        group by created_at, id, name order by created_at desc limit ${pagesize} offset ${page}`;

    queryCount = `select count(*) from ${this.tenant}.tenants where 1=1 ${
      Object.keys(filters).length ? filtersQuery : ''
    }`;

    const data = await this.dbConnection.query(query);
    const countData = await this.dbConnection.query(queryCount);

    const count = Number(countData?.rowCount ?? 0);

    return {
      data,
      count,
    };
  }
  async add(input) {
    const data = await this.dbConnection.query(
      `insert into ${
        this.tenant
      }.tenants (id, name, tenant_name, tenant_img, created_at) values ('${uuid()}', '${
        input.tenant_name
      }', '${createTenantName(input.tenant_name)}', '${
        input.tenant_img
      }', NOW() - interval '3 hour') returning *`,
    );

    return data;
  }

  async edit(input) {
    const tenant = await this.dbConnection.query(
      `select * from public.tenants where name = '${input.name}'`,
    );

    if (tenant.rows.length > 0) {
      throw new HttpException(
        'Nome j√° cadastrado, por favor, escolha um outro nome.',
        HttpStatus.INTERNAL_SERVER_ERROR,
      );
    }

    let values: string = '';

    if (input.name != null) {
      values = values + `name = '${input.name}',`;
    }

    if (input.tenant_img != null) {
      values = values + `tenant_img = '${input.tenant_img}',`;
    }

    const data = await this.dbConnection.query(
      `update ${this.tenant}.tenants set ${values}
      updated_at = NOW() - interval '3 hour'
      where id = '${input.id}' returning *`,
    );

    return data[0];
  }

  async remove(id: string) {
    const data = await this.dbConnection.query(
      `delete from ${this.tenant}.tenants where id = '${id}' returning *`,
    );

    return data;
  }

  async runMigrations(schemaName) {
    const data = await this.dbConnection.query(
      `
      -- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://github.com/pgadmin-org/pgadmin4/issues/new/choose if you find any bugs, including reproduction steps.
BEGIN;


CREATE SCHEMA IF NOT EXISTS ${schemaName};


CREATE TABLE IF NOT EXISTS ${schemaName}.categories
(
    id uuid NOT NULL,
    name character varying COLLATE pg_catalog."default" NOT NULL,
    url_img character varying COLLATE pg_catalog."default",
    created_at timestamp without time zone NOT NULL,
    alternative_id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    CONSTRAINT categories_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS ${schemaName}.category_products
(
    id uuid,
    alternative_id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    product_id uuid,
    category_id uuid,
    order_view integer
);

CREATE TABLE IF NOT EXISTS ${schemaName}.menu_categories
(
    id uuid,
    alternative_id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    menu_id uuid,
    category_id uuid,
    order_view integer
);

CREATE TABLE IF NOT EXISTS ${schemaName}.menus
(
    id uuid NOT NULL,
    alternative_id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    name character varying COLLATE pg_catalog."default",
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone,
    is_active boolean DEFAULT false,
    CONSTRAINT menu_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS ${schemaName}.products
(
    id uuid NOT NULL,
    name character varying COLLATE pg_catalog."default" NOT NULL,
    discount_value integer,
    price numeric NOT NULL,
    on_sale boolean NOT NULL,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone,
    alternative_id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    discount_type character varying COLLATE pg_catalog."default",
    url_img character varying COLLATE pg_catalog."default",
    description character varying COLLATE pg_catalog."default",
    is_gluten_free boolean,
    is_vegan boolean,
    is_vegetarian boolean,
    CONSTRAINT products_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.tenants
(
    id uuid NOT NULL,
    name character varying COLLATE pg_catalog."default" NOT NULL,
    tenant_name character varying COLLATE pg_catalog."default" NOT NULL,
    created_at timestamp without time zone NOT NULL,
    deleted_at timestamp without time zone,
    updated_at timestamp without time zone,
    alternative_id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    tenant_img character varying COLLATE pg_catalog."default",
    CONSTRAINT tenants_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.users
(
    id uuid NOT NULL,
    username character varying COLLATE pg_catalog."default" NOT NULL,
    password character varying COLLATE pg_catalog."default" NOT NULL,
    is_admin boolean NOT NULL,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone,
    alternative_id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    tenant_id uuid NOT NULL,
    name character varying COLLATE pg_catalog."default" NOT NULL,
    email character varying COLLATE pg_catalog."default",
    CONSTRAINT users_pkey PRIMARY KEY (id)
);

ALTER TABLE IF EXISTS ${schemaName}.category_products
    ADD CONSTRAINT fk_catprod FOREIGN KEY (product_id)
    REFERENCES ${schemaName}.products (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS ${schemaName}.category_products
    ADD CONSTRAINT fk_prodcat FOREIGN KEY (category_id)
    REFERENCES ${schemaName}.categories (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS ${schemaName}.menu_categories
    ADD CONSTRAINT category_id FOREIGN KEY (category_id)
    REFERENCES ${schemaName}.categories (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS ${schemaName}.menu_categories
    ADD CONSTRAINT "menuId" FOREIGN KEY (menu_id)
    REFERENCES ${schemaName}.menus (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;

END;
      `,
    );

    return data;
  }
}
